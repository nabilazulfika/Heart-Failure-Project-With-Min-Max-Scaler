{"cells":[{"cell_type":"markdown","metadata":{"id":"ZiI0hr6zaSKY"},"source":["**Tentang Dataset**\n","\n","Penyakit kardiovaskular (CVDs) adalah penyebab kematian nomor 1 secara global , mengambil sekitar 17,9 juta jiwa setiap tahun , yang menyumbang 31% dari semua kematian di seluruh dunia .\n","Gagal jantung adalah kejadian umum yang disebabkan oleh CVD dan kumpulan data ini berisi 12 fitur yang dapat digunakan untuk memprediksi kematian akibat gagal jantung.\n","\n","Sebagian besar penyakit kardiovaskular dapat dicegah dengan mengatasi faktor risiko perilaku seperti penggunaan tembakau, diet tidak sehat dan obesitas, kurangnya aktivitas fisik, dan penggunaan alkohol yang berbahaya menggunakan strategi di seluruh populasi.\n","\n","Orang dengan penyakit kardiovaskular atau yang berada pada risiko kardiovaskular tinggi (karena adanya satu atau lebih faktor risiko seperti hipertensi, diabetes, hiperlipidemia atau penyakit yang sudah ada) memerlukan deteksi dan manajemen dini di mana model pembelajaran mesin dapat sangat membantu.\n","\n","**Informasi atribut:**\n","- Usia\n","- Penurunan sel darah merah atau hemoglobin (boolean)\n","- Tingkat enzim CPK dalam darah (mcg/L)\n","- Jika pasien menderita diabetes (boolean)\n","- Persentase darah yang meninggalkan jantung pada setiap kontraksi (persentase)\n","- Jika pasien memiliki hipertensi (boolean)\n","- Trombosit dalam darah (kiloplatelet/mL)\n","- Kadar kreatinin serum dalam darah (mg/dL)\n","- Kadar natrium serum dalam darah (mEq/L)\n","- Wanita atau pria (biner)"]},{"cell_type":"markdown","metadata":{"id":"0We9fkKHC2zJ"},"source":["***Note**\n","\n","Ada 2 kolom yang tidak bisa dijadikan fitur:\n","- **DEATH_EVENT**, mengkodekan apakah pasien meninggal (1) atau apakah mereka disensor (0). Menyensor berarti bahwa para ilmuwan kehilangan kontak dengan pasien.\n","\n","- **time**, menangkap waktu kejadian. Artinya, waktu di mana pasien meninggal atau disensor.\n","\n","time sangat berkorelasi dengan DEATH_EVENT karena kematian pasien berdampak langsung pada waktu, bukan sebaliknya . Jika tujuannya adalah untuk memprediksi kematian atau kelangsungan hidup pasien, maka time tidak boleh digunakan sebagai input model."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25614,"status":"ok","timestamp":1675520053739,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"Y67VHfrJ1Zg_","outputId":"4d2b2876-c75c-424b-b151-96bf1d6ac27b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"a_QyizIdAJJD"},"source":["# Preparing Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3-O7cLlaUKcW"},"outputs":[],"source":["import pandas as pd\n","\n","# EDA\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","# labelEncoder\n","from sklearn.preprocessing import LabelEncoder\n","\n","# scaling data\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# ADASYN\n","from imblearn.over_sampling import ADASYN\n","\n","# splitting data\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import KFold\n","\n","# modelling\n","from sklearn.ensemble import RandomForestClassifier\n","\n","# evaluation\n","from sklearn.metrics import plot_confusion_matrix\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BUxPv-WZUWNt"},"outputs":[],"source":["df = pd.read_csv(\"/content/drive/MyDrive/heart_failure_clinical_records_dataset.csv\")"]},{"cell_type":"markdown","metadata":{"id":"jml89CtqA-se"},"source":["# Checking Data\n","\n","Kolom **DEATH_EVENT** adalah kolom yang akan kita jadikan target prediksi. Mari kita lakukan **rename** menjadi **target**."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":47,"status":"ok","timestamp":1675520058250,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"wr6_FyklAuyE","outputId":"60a4c6ff-a498-4f16-d8db-db22e6a57ebc"},"outputs":[{"output_type":"stream","name":"stdout","text":["(299, 13)\n"]}],"source":["print(df.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"executionInfo":{"elapsed":45,"status":"ok","timestamp":1675520058252,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"lQzqVM64UmBn","outputId":"2ee1c0f1-97a2-4d4d-df4b-bc2da9dcf25f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    age  anaemia  creatinine_phosphokinase  diabetes  ejection_fraction  \\\n","0  75.0        0                       582         0                 20   \n","1  55.0        0                      7861         0                 38   \n","2  65.0        0                       146         0                 20   \n","3  50.0        1                       111         0                 20   \n","4  65.0        1                       160         1                 20   \n","\n","   high_blood_pressure  platelets  serum_creatinine  serum_sodium  sex  \\\n","0                    1  265000.00               1.9           130    1   \n","1                    0  263358.03               1.1           136    1   \n","2                    0  162000.00               1.3           129    1   \n","3                    0  210000.00               1.9           137    1   \n","4                    0  327000.00               2.7           116    0   \n","\n","   smoking  time  DEATH_EVENT  \n","0        0     4            1  \n","1        0     6            1  \n","2        1     7            1  \n","3        0     7            1  \n","4        0     8            1  "],"text/html":["\n","  <div id=\"df-0b105a8e-76ab-4f42-88df-9ead1e69ae75\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>anaemia</th>\n","      <th>creatinine_phosphokinase</th>\n","      <th>diabetes</th>\n","      <th>ejection_fraction</th>\n","      <th>high_blood_pressure</th>\n","      <th>platelets</th>\n","      <th>serum_creatinine</th>\n","      <th>serum_sodium</th>\n","      <th>sex</th>\n","      <th>smoking</th>\n","      <th>time</th>\n","      <th>DEATH_EVENT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>75.0</td>\n","      <td>0</td>\n","      <td>582</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>1</td>\n","      <td>265000.00</td>\n","      <td>1.9</td>\n","      <td>130</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>55.0</td>\n","      <td>0</td>\n","      <td>7861</td>\n","      <td>0</td>\n","      <td>38</td>\n","      <td>0</td>\n","      <td>263358.03</td>\n","      <td>1.1</td>\n","      <td>136</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>65.0</td>\n","      <td>0</td>\n","      <td>146</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>162000.00</td>\n","      <td>1.3</td>\n","      <td>129</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>50.0</td>\n","      <td>1</td>\n","      <td>111</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>210000.00</td>\n","      <td>1.9</td>\n","      <td>137</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>65.0</td>\n","      <td>1</td>\n","      <td>160</td>\n","      <td>1</td>\n","      <td>20</td>\n","      <td>0</td>\n","      <td>327000.00</td>\n","      <td>2.7</td>\n","      <td>116</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b105a8e-76ab-4f42-88df-9ead1e69ae75')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0b105a8e-76ab-4f42-88df-9ead1e69ae75 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0b105a8e-76ab-4f42-88df-9ead1e69ae75');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":43,"status":"ok","timestamp":1675520058254,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"d-CgH_EQAxEK","outputId":"ee4964f4-c573-48bc-ee08-acb37c5ea2bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 299 entries, 0 to 298\n","Data columns (total 13 columns):\n"," #   Column                    Non-Null Count  Dtype  \n","---  ------                    --------------  -----  \n"," 0   age                       299 non-null    float64\n"," 1   anaemia                   299 non-null    int64  \n"," 2   creatinine_phosphokinase  299 non-null    int64  \n"," 3   diabetes                  299 non-null    int64  \n"," 4   ejection_fraction         299 non-null    int64  \n"," 5   high_blood_pressure       299 non-null    int64  \n"," 6   platelets                 299 non-null    float64\n"," 7   serum_creatinine          299 non-null    float64\n"," 8   serum_sodium              299 non-null    int64  \n"," 9   sex                       299 non-null    int64  \n"," 10  smoking                   299 non-null    int64  \n"," 11  time                      299 non-null    int64  \n"," 12  DEATH_EVENT               299 non-null    int64  \n","dtypes: float64(3), int64(10)\n","memory usage: 30.5 KB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FLnshklova3K"},"outputs":[],"source":["df = df.rename(columns={\"DEATH_EVENT\": \"target\"})"]},{"cell_type":"markdown","metadata":{"id":"eiaJNo6JBBdZ"},"source":["**Cek apakah ada nilai null atau tidak.**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":41,"status":"ok","timestamp":1675520058259,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"ualOMtL7A5gY","outputId":"de788cb8-4375-4973-afc9-f776a6af2a2e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["age                         0\n","anaemia                     0\n","creatinine_phosphokinase    0\n","diabetes                    0\n","ejection_fraction           0\n","high_blood_pressure         0\n","platelets                   0\n","serum_creatinine            0\n","serum_sodium                0\n","sex                         0\n","smoking                     0\n","time                        0\n","target                      0\n","dtype: int64"]},"metadata":{},"execution_count":8}],"source":["df.isnull().sum()"]},{"cell_type":"markdown","metadata":{"id":"8XDUcMlHBFg7"},"source":["**Cek apakah ada nilai duplikat atau tidak.**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":37,"status":"ok","timestamp":1675520058261,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"QYoTbWjjAzK6","outputId":"a9ac22b4-a059-4a89-8214-9427bb42f62e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":9}],"source":["df.duplicated().sum()"]},{"cell_type":"markdown","metadata":{"id":"E9ZyG3ExBWws"},"source":["**Cek statistik deskriptif dataframe.**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":364},"executionInfo":{"elapsed":1095,"status":"ok","timestamp":1675520059323,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"Eh2_C86GBTD9","outputId":"10dcf985-8d5e-4be3-d930-34b55b3561a3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              age     anaemia  creatinine_phosphokinase    diabetes  \\\n","count  299.000000  299.000000                299.000000  299.000000   \n","mean    60.833893    0.431438                581.839465    0.418060   \n","std     11.894809    0.496107                970.287881    0.494067   \n","min     40.000000    0.000000                 23.000000    0.000000   \n","25%     51.000000    0.000000                116.500000    0.000000   \n","50%     60.000000    0.000000                250.000000    0.000000   \n","75%     70.000000    1.000000                582.000000    1.000000   \n","max     95.000000    1.000000               7861.000000    1.000000   \n","\n","       ejection_fraction  high_blood_pressure      platelets  \\\n","count         299.000000           299.000000     299.000000   \n","mean           38.083612             0.351171  263358.029264   \n","std            11.834841             0.478136   97804.236869   \n","min            14.000000             0.000000   25100.000000   \n","25%            30.000000             0.000000  212500.000000   \n","50%            38.000000             0.000000  262000.000000   \n","75%            45.000000             1.000000  303500.000000   \n","max            80.000000             1.000000  850000.000000   \n","\n","       serum_creatinine  serum_sodium         sex    smoking        time  \\\n","count         299.00000    299.000000  299.000000  299.00000  299.000000   \n","mean            1.39388    136.625418    0.648829    0.32107  130.260870   \n","std             1.03451      4.412477    0.478136    0.46767   77.614208   \n","min             0.50000    113.000000    0.000000    0.00000    4.000000   \n","25%             0.90000    134.000000    0.000000    0.00000   73.000000   \n","50%             1.10000    137.000000    1.000000    0.00000  115.000000   \n","75%             1.40000    140.000000    1.000000    1.00000  203.000000   \n","max             9.40000    148.000000    1.000000    1.00000  285.000000   \n","\n","          target  \n","count  299.00000  \n","mean     0.32107  \n","std      0.46767  \n","min      0.00000  \n","25%      0.00000  \n","50%      0.00000  \n","75%      1.00000  \n","max      1.00000  "],"text/html":["\n","  <div id=\"df-a5d7d26d-524a-4e74-a146-fffb060b9b35\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>anaemia</th>\n","      <th>creatinine_phosphokinase</th>\n","      <th>diabetes</th>\n","      <th>ejection_fraction</th>\n","      <th>high_blood_pressure</th>\n","      <th>platelets</th>\n","      <th>serum_creatinine</th>\n","      <th>serum_sodium</th>\n","      <th>sex</th>\n","      <th>smoking</th>\n","      <th>time</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.00000</td>\n","      <td>299.000000</td>\n","      <td>299.000000</td>\n","      <td>299.00000</td>\n","      <td>299.000000</td>\n","      <td>299.00000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>60.833893</td>\n","      <td>0.431438</td>\n","      <td>581.839465</td>\n","      <td>0.418060</td>\n","      <td>38.083612</td>\n","      <td>0.351171</td>\n","      <td>263358.029264</td>\n","      <td>1.39388</td>\n","      <td>136.625418</td>\n","      <td>0.648829</td>\n","      <td>0.32107</td>\n","      <td>130.260870</td>\n","      <td>0.32107</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>11.894809</td>\n","      <td>0.496107</td>\n","      <td>970.287881</td>\n","      <td>0.494067</td>\n","      <td>11.834841</td>\n","      <td>0.478136</td>\n","      <td>97804.236869</td>\n","      <td>1.03451</td>\n","      <td>4.412477</td>\n","      <td>0.478136</td>\n","      <td>0.46767</td>\n","      <td>77.614208</td>\n","      <td>0.46767</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>40.000000</td>\n","      <td>0.000000</td>\n","      <td>23.000000</td>\n","      <td>0.000000</td>\n","      <td>14.000000</td>\n","      <td>0.000000</td>\n","      <td>25100.000000</td>\n","      <td>0.50000</td>\n","      <td>113.000000</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>4.000000</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>51.000000</td>\n","      <td>0.000000</td>\n","      <td>116.500000</td>\n","      <td>0.000000</td>\n","      <td>30.000000</td>\n","      <td>0.000000</td>\n","      <td>212500.000000</td>\n","      <td>0.90000</td>\n","      <td>134.000000</td>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>73.000000</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>60.000000</td>\n","      <td>0.000000</td>\n","      <td>250.000000</td>\n","      <td>0.000000</td>\n","      <td>38.000000</td>\n","      <td>0.000000</td>\n","      <td>262000.000000</td>\n","      <td>1.10000</td>\n","      <td>137.000000</td>\n","      <td>1.000000</td>\n","      <td>0.00000</td>\n","      <td>115.000000</td>\n","      <td>0.00000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>70.000000</td>\n","      <td>1.000000</td>\n","      <td>582.000000</td>\n","      <td>1.000000</td>\n","      <td>45.000000</td>\n","      <td>1.000000</td>\n","      <td>303500.000000</td>\n","      <td>1.40000</td>\n","      <td>140.000000</td>\n","      <td>1.000000</td>\n","      <td>1.00000</td>\n","      <td>203.000000</td>\n","      <td>1.00000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>95.000000</td>\n","      <td>1.000000</td>\n","      <td>7861.000000</td>\n","      <td>1.000000</td>\n","      <td>80.000000</td>\n","      <td>1.000000</td>\n","      <td>850000.000000</td>\n","      <td>9.40000</td>\n","      <td>148.000000</td>\n","      <td>1.000000</td>\n","      <td>1.00000</td>\n","      <td>285.000000</td>\n","      <td>1.00000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5d7d26d-524a-4e74-a146-fffb060b9b35')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a5d7d26d-524a-4e74-a146-fffb060b9b35 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a5d7d26d-524a-4e74-a146-fffb060b9b35');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}],"source":["df.describe()"]},{"cell_type":"markdown","source":["# Preprocessing Data"],"metadata":{"id":"shlwJnBylK39"}},{"cell_type":"code","source":["le = LabelEncoder()\n","\n","df['anaemia'] = le.fit_transform(df['anaemia'])\n","df['diabetes'] = le.fit_transform(df['diabetes'])\n","df['high_blood_pressure'] = le.fit_transform(df['high_blood_pressure'])\n","df['sex'] = le.fit_transform(df['sex'])\n","df['smoking'] = le.fit_transform(df['smoking'])\n","df['target'] = le.fit_transform(df['target'])\n","\n","df.to_csv(\"df_encode.csv\")"],"metadata":{"id":"4me0QK-2ZhtU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Feature Importance"],"metadata":{"id":"8xRdSrWP8q_1"}},{"cell_type":"code","source":["X = df.drop(['target'], axis=1)\n","y = df['target']\n","\n","from sklearn.ensemble import RandomForestClassifier\n","model = RandomForestClassifier()\n","model.fit(X,y)\n","print(model.feature_importances_) \n","\n","#plot the graph of feature importances \n","feat_importances = pd.Series(model.feature_importances_, index=X.columns)\n","plt.figure(figsize=(10,5))\n","feat_importances.nlargest(1).plot(kind='barh')\n","plt.title(\"Fitur yang Paling Mempengaruhi Target\")\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":371},"id":"g5_4zbl8uteI","executionInfo":{"status":"ok","timestamp":1675509480409,"user_tz":-420,"elapsed":91,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"}},"outputId":"226f384a-164e-4a6c-8c1e-102329ddbb3a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.08265957 0.01217274 0.08416074 0.01169024 0.10528096 0.01160534\n"," 0.07864312 0.15400579 0.07181763 0.01337464 0.01164439 0.36294485]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"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cm+gXQAAS7fW7cLrkxyxLzvu7q8kubyqfixJavI9+7IvAIDtZo8hq7uvSfI3VfWhJL+9D/t/QpKnVtUHk1yS5PR92AcAwLaz5u3C7n78Luadk+Schec7drWsuy9PcupGGwkAsN34xncAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIABDl12A3blu+96VM5/0SOX3QwAgH2mJwsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYAAhCwBgACELAGAAIQsAYIDq7mW34Vaq6vokly67HVvcsUm+uOxGbHFqtDY1Wh91WpsarU2N1rZda3RSdx+3euahy2jJOlza3d+77EZsZVV1vhrtmRqtTY3WR53WpkZrU6O1HWg1crsQAGAAIQsAYICtGrLOXnYDtgE1WpsarU2N1ked1qZGa1OjtR1QNdqSA98BALa7rdqTBQCwrW1qyKqqU6vq0qr6eFU9ZxfLD6uq183L/66qdiws+8V5/qVV9bDNbPdm2tcaVdWOqrqxqi6cH2dtdts30zrq9ANV9f6q+kZVPXrVsidV1cfmx5M2r9Wba4M1+qeFc+lNm9fqzbWOGv23qvpwVV1UVW+vqpMWljmPsmaNDorzKFlXnZ5eVRfPtXhPVd1nYZnrW3Zfo219fevuTXkkOSTJJ5LcM8ltk3wwyX1WrfOMJGfN049N8rp5+j7z+ocluce8n0M2q+3bpEY7knxo2cewheq0I8n9krw6yaMX5t8pyWXzv8fM08cs+5i2Uo3mZV9d9jFskRr9myR3mKd/auHnzXm0Ro0OlvNoL+p05ML0Dyf5y3na9W3tGm3b69tm9mQ9KMnHu/uy7v56ktcmOX3VOqcnedU8fV6Sf1tVNc9/bXff1N2XJ/n4vL8DzUZqdDBZs07d/cnuvijJzau2fViSt3b3td39pSRvTXLqZjR6k22kRgeL9dTond29c376viQnztPOo9keanQwWU+dvrLw9I5JVgZEu77N9lCjbWszQ9Zdk1yx8Pwz87xdrtPd30hyXZI7r3PbA8FGapQk96iqD1TVX1fVQ0Y3dok2cj44l9bndlV1flW9r6oetX+btmXsbY2emuQv9nHb7WojNUoOjvMoWWedquqnq+oTSV6c5L/szbYHgI3UKNmm17et+o3v7L2rk9y9u6+pqgcmeWNVnbLqLwNYr5O6+8qqumeSd1TVxd39iWU3almq6seTfG+SH1x2W7aq3dTIebSgu1+e5OVV9fgkv5zkgB3Lt692U6Nte33bzJ6sK5PcbeH5ifO8Xa5TVYcmOSrJNevc9kCwzzWau5qvSZLuviDTve/vGN7i5djI+eBcWofuvnL+97Ik70rygP3ZuC1iXTWqqh9K8twkP9zdN+3NtgeAjdToYDmPkr0/H16bZKVnz7m0a9+s0ba+vm3W4K9MvWaXZRrYtzLo7ZRV6/x0bjmo+/Xz9Cm55cDAy3JgDgzcSI2OW6lJpoGFVya507KPaVl1Wlj3nNx64PvlmQYrHzNPH3B12mCNjkly2Dx9bJKPZdUA1QPhsc6ftwdk+oV+8qr5zqO1a3RQnEd7UaeTF6ZPS3L+PO36tnaNtu31bbOL/IgkH51/IJ87z3tBpr9+kuR2Sd6QaeDf/0tyz4Vtnztvd2mShy+7cFutRkl+NMklSS5M8v4kpy37WJZcp+/LdM//hky9oZcsbPsTc/0+nuQpyz6WrVajJA9OcvH8S/DiJE9d9rEssUZvS/K5+efqwiRvch6tr0YH03m0zjq9bOF39DuzEDBc3/Zco+18ffON7wAAA/jGdwCAAYQsAIABhCwAgAGELACAAYQsAIABhCwAgAGELACAAYQsAIAB/j/fFmTLWleERwAAAABJRU5ErkJggg==\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## Feature Scalling"],"metadata":{"id":"YjCcK-739p4b"}},{"cell_type":"code","source":["final_df = df[['time']]"],"metadata":{"id":"-DaNSmee9sLw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["scaler = MinMaxScaler()\n","X = scaler.fit(final_df)\n","X = scaler.transform(final_df)\n","y = df['target']"],"metadata":{"id":"4MdQ4ikj9veK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X1 = pd.DataFrame(data=X, columns=[\"time\"])"],"metadata":{"id":"4OH12hA8IRfb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, (ax1, ax2)= plt.subplots(nrows = 1, ncols = 2, figsize = (20,5))\n","\n","sns.kdeplot(data=df, ax=ax1)\n","ax1.set_title('Before Scalling')\n","\n","sns.kdeplot(data=X1, ax=ax2)\n","ax2.set_title('After Scalling')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":291},"id":"hxKdVGrxHkp0","executionInfo":{"status":"ok","timestamp":1675520060321,"user_tz":-420,"elapsed":1020,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"}},"outputId":"63474fe4-c80a-48b7-84df-6c739822803a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'After Scalling')"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x360 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"FdJDruzEEjOA"},"source":["## Cek keseimbangan data target."]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":26,"status":"ok","timestamp":1675520060323,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"jM0TGPVo6fVy","colab":{"base_uri":"https://localhost:8080/"},"outputId":"29a031a1-86fc-4b72-a96a-be8f8e2f37b8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    203\n","1     96\n","Name: target, dtype: int64"]},"metadata":{},"execution_count":16}],"source":["df['target'].value_counts()"]},{"cell_type":"markdown","metadata":{"id":"jdVrayGfW5bD"},"source":["Dari informasi diatas, diketahui bahwa kumpulan **data tidak seimbang**. Kita perlu menyeimbangkannya dulu sebelum melakukan modelling terhadap data."]},{"cell_type":"markdown","metadata":{"id":"sQYGYz3_X_So"},"source":["Tujuan kita adalah untuk memprediksi kematian pasien, maka time tidak boleh \n","\n","---\n","\n","digunakan sebagai input model/fitur."]},{"cell_type":"markdown","metadata":{"id":"MFyUfNY4WRJ-"},"source":["## Mengatasi ketimpangan kelas dengan teknik oversampling kelas minoritas \n","\n","Metode ini mirip dengan SMOTE tetapi menghasilkan jumlah sampel yang berbeda tergantung pada perkiraan distribusi lokal kelas yang akan di-oversampling."]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":62,"status":"ok","timestamp":1675520061055,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"D1YNNYwwX0Op","colab":{"base_uri":"https://localhost:8080/"},"outputId":"55e54da5-1031-4966-8756-1bb3f3832fe3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    211\n","0    203\n","Name: target, dtype: int64"]},"metadata":{},"execution_count":17}],"source":["resample = ADASYN(sampling_strategy='all', random_state=42)\n","X, y = resample.fit_resample(X,y)\n","\n","y.value_counts()"]},{"cell_type":"markdown","metadata":{"id":"E-8TRVymvG3w"},"source":["## KFold Cross Validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g8btx1uzYzsK","executionInfo":{"status":"ok","timestamp":1675520061057,"user_tz":-420,"elapsed":59,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f98f6989-3d91-44ca-9ac7-26d74e6c2c31"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fold:1, Train set: 372, Test set:42\n","Fold:2, Train set: 372, Test set:42\n","Fold:3, Train set: 372, Test set:42\n","Fold:4, Train set: 372, Test set:42\n","Fold:5, Train set: 373, Test set:41\n","Fold:6, Train set: 373, Test set:41\n","Fold:7, Train set: 373, Test set:41\n","Fold:8, Train set: 373, Test set:41\n","Fold:9, Train set: 373, Test set:41\n","Fold:10, Train set: 373, Test set:41\n"]}],"source":["kf = KFold(n_splits=10, shuffle=True, random_state=42)\n","cnt = 1\n","\n","for train_index, test_index in kf.split(X, y):\n","  print(f'Fold:{cnt}, Train set: {len(train_index)}, Test set:{len(test_index)}')\n","  cnt += 1"]},{"cell_type":"markdown","metadata":{"id":"Bre-Mm5CLLtd"},"source":["# Accuracy"]},{"cell_type":"code","source":["classifier_rf = RandomForestClassifier()\n","\n","accuracy   = []\n","\n","for train_index, test_index in kf.split(X, y):\n","  X_train, X_test = X[train_index], X[test_index]\n","  y_train, y_test = y[train_index], y[test_index]\n"," \n","  classifier_rf.fit(X_train,y_train)\n","  y_pred = classifier_rf.predict(X_test)\n","\n","  ac = accuracy_score(y_test,y_pred)\n","\n","  accuracy.append(ac)\n","\n","print(accuracy)\n","print(ac)"],"metadata":{"id":"B8iPBzURbbJv","executionInfo":{"status":"ok","timestamp":1675524391827,"user_tz":-420,"elapsed":2015,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c4a06f81-b9aa-467b-c589-ced4a931eade"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.6428571428571429, 0.8333333333333334, 0.7619047619047619, 0.8333333333333334, 0.6829268292682927, 0.7560975609756098, 0.8292682926829268, 0.7317073170731707, 0.6829268292682927, 0.7560975609756098]\n","0.7560975609756098\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":14,"status":"ok","timestamp":1675520570030,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"cM_OUuHclgar","colab":{"base_uri":"https://localhost:8080/"},"outputId":"26f52b49-6d7c-4cbe-9e45-4500dceec5a4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest: 75.60975609756098\n"]}],"source":["print(\"Random Forest:\", accuracy_score(y_test, y_pred)*100)"]},{"cell_type":"markdown","metadata":{"id":"LfZJD0oIYFuM"},"source":["# Confusion Matrix & Classification Report"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":1733,"status":"ok","timestamp":1675520076379,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"tsmJlY0ADAbM","colab":{"base_uri":"https://localhost:8080/","height":351},"outputId":"4ddae108-d863-4dbb-f8b6-f5d6c122e4af"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fed0a3b93d0>"]},"metadata":{},"execution_count":21},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["plot_confusion_matrix(classifier_rf, X_test, y_test)"]},{"cell_type":"code","source":["plot_confusion_matrix(classifier_rf, X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"RfnqwrPNJIpI","executionInfo":{"status":"ok","timestamp":1675520076880,"user_tz":-420,"elapsed":27,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"}},"outputId":"070fecad-44d3-4859-a7e2-391f9018a903"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fed0a3bd070>"]},"metadata":{},"execution_count":23},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plot_confusion_matrix(classifier_rf, X, y)"],"metadata":{"id":"3pG422-zB6UN","executionInfo":{"status":"ok","timestamp":1675520212820,"user_tz":-420,"elapsed":12,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"}},"colab":{"base_uri":"https://localhost:8080/","height":354},"outputId":"140836fd-b369-4b37-896f-014717c62e80"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fed09eb7b80>"]},"metadata":{},"execution_count":24},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":72,"status":"ok","timestamp":1675509483710,"user":{"displayName":"NABILA ZULFIKA HEMADEWI -","userId":"12229229067340115993"},"user_tz":-420},"id":"nmgAtNkDzMZZ","colab":{"base_uri":"https://localhost:8080/"},"outputId":"88774b06-a800-447c-e59d-cd48e17a3cb6"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.81      0.74      0.77        23\n","           1       0.70      0.78      0.74        18\n","\n","    accuracy                           0.76        41\n","   macro avg       0.75      0.76      0.75        41\n","weighted avg       0.76      0.76      0.76        41\n","\n"]}],"source":["# Random Forest\n","print(classification_report(y_test, y_pred))"]},{"cell_type":"code","source":[],"metadata":{"id":"QffB4JvxPeF1"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1GkcqOLvKCt8smbdwrz873HDbewABq_2d","timestamp":1674389444051},{"file_id":"1zVx3WHjJwof22D1AJyf1Fwh2ooisMWYe","timestamp":1674388967777},{"file_id":"1D2XnMx6SdeOlokPd1bP9IriXrwaX23h4","timestamp":1674388709369},{"file_id":"1GwLP3y4ltWcpC4CxQ4pBCiP5T9IWTkrx","timestamp":1674388486319},{"file_id":"19hhQ3aWw2D_aG6BpshfBYe8JoBGnrLWP","timestamp":1674388205732},{"file_id":"1wJaHzB8jNaQiGDa9VaDv5_NXq92o7Znp","timestamp":1674387974672},{"file_id":"1l6woLaiJ0HOH2e_BuqK93O6qN2khRF5h","timestamp":1674387791540},{"file_id":"1DZOIUby8_CMcWZmC8ibkyc0w5wVyq9Ux","timestamp":1674387583849},{"file_id":"1hSfrZzX-pKd7DtatP8md8robtL9KnB7p","timestamp":1674387053766},{"file_id":"1eiuNggwfDc2RXjD_d_ZZwldPX6FS2DTW","timestamp":1674376319733},{"file_id":"1tpN3P0Ee44UhRqVGrjx12okLaKplvvOU","timestamp":1674375933311},{"file_id":"1dIkTyLZ7WZ5SgedZ8uPkaXCfRau6YUK1","timestamp":1654327695902},{"file_id":"1svcn3xb86_JYG3G4dafwK0egqFP2rn4N","timestamp":1653793215473},{"file_id":"1GeujmOR-UA49_3ScJZria4Y7rOs9kCyQ","timestamp":1653738384094},{"file_id":"1rh3g9QFG0FzWwQQCg06lpEnMqrUhw5jx","timestamp":1653442135495}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}